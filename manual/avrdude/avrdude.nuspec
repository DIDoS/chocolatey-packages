<?xml version="1.0" encoding="utf-8"?>
<!-- Do not remove this test for UTF-8: if â€œÎ©â€ doesnâ€™t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
  <metadata>
    <id>avrdude</id>
    <version>6.3</version>
    <packageSourceUrl>https://github.com/chtof/chocolatey-packages/tree/master/manual/avrdude</packageSourceUrl>
    <owners>chtof</owners>
    <title>AVR Downloader/UploaDEr</title>
    <authors>AVR Downloader/UploaDEr Team.</authors>
    <projectUrl>https://www.nongnu.org/avrdude/</projectUrl>
    <!--<iconUrl>https://cdn.jsdelivr.net/gh/chtof/chocolatey-packages/manual/avrdude/avrdude.png</iconUrl>-->
    <copyright>AVR Downloader/UploaDEr Team.</copyright>
    <licenseUrl>https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt</licenseUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <projectSourceUrl>https://savannah.nongnu.org/svn/?group=avrdude</projectSourceUrl>
    <docsUrl>https://www.nongnu.org/avrdude/user-manual/avrdude.html</docsUrl>
    <mailingListUrl>http://lists.nongnu.org/mailman/listinfo/avr-chat</mailingListUrl>
    <bugTrackerUrl>https://savannah.nongnu.org/bugs/?group=avrdude</bugTrackerUrl>
    <tags>avrdude ROM EEPROM AVR microcontrollers download upload manipulate</tags>
    <summary>AVRDUDE is a utility to download/upload/manipulate the ROM and EEPROM contents of AVR microcontrollers using the in-system programming technique (ISP).</summary>
    <description><![CDATA[
[AVRDUDE](http://savannah.nongnu.org/projects/avrdude) is a utility to download/upload/manipulate the ROM and EEPROM contents of AVR microcontrollers using the in-system programming technique (ISP).

## Main features
The major features of AVRDUDE include:

- Command-line driven user interface for all downloading and uploading features (including handling fuse bytes), for easy automation e. g. by inclusion into Makefiles.
- Interactive examination and modification of various memory regions in so-called *terminal mode*. Also offered is an option to modify the operational parameters of an Atmel STK500 board (target voltage, VAref, master clock frequency).
- Known to run on all major POSIX-style operating systems, as well as Win32 platforms. By using existing operating system drivers on the POSIX-style systems, secure parallel-port access without root privileges can be maintained. On Win32 platforms, parallel port access requires the previous installation of a driver (`giveio.sys`) that grants a user process direct access to the IO registers.
- Supports a wide range of programming hardware, from cheap ISP plugs that connect the AVR's ISP interface directly to a computer's parallel port (no additional circuitry) or serial port (some additional circuitry needed), more advanced ISP adapters using a buffer/driver chip (like a 74HC373), up to (more complex) serially connected programmers like AVR910-style ISP devices, the Atmel STK500 board, and the Atmel JTAG ICE mkII. Most popular adapters come pre-defined, adding a new parallel-port adapter is as simple as editing a configuration file (no recompilation needed).
- Supports Intel Hex, Motorola S-Record, and raw binary files for input and output, as well as direct memory contents specification on the command-line (useful e. g. for fuse bytes). On input, the file format can be auto-detected.
- In "terminal mode", the device's memory areas can be examined, and possibly modified. This allows to set fuses interactively, or to modify a few EEPROM cells.
]]></description>
    <releaseNotes>https://savannah.nongnu.org/news/?group=avrdude</releaseNotes>
  </metadata>
  <files>
    <file src="legal\**" target="legal" />
    <file src="tools\**" target="tools" />
  </files>
</package>